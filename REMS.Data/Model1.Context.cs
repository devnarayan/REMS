//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace REMS.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class REMSDBEntities : DbContext
    {
        public REMSDBEntities()
            : base("name=REMSDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AdditionalCharge> AdditionalCharges { get; set; }
        public virtual DbSet<AddOnCharge> AddOnCharges { get; set; }
        public virtual DbSet<Agreement> Agreements { get; set; }
        public virtual DbSet<AssuredReturn> AssuredReturns { get; set; }
        public virtual DbSet<AssuredReturnPayment> AssuredReturnPayments { get; set; }
        public virtual DbSet<BankMaster> BankMasters { get; set; }
        public virtual DbSet<BrokerMaster> BrokerMasters { get; set; }
        public virtual DbSet<BrokerPayment> BrokerPayments { get; set; }
        public virtual DbSet<BrokerToProperty> BrokerToProperties { get; set; }
        public virtual DbSet<CityMaster> CityMasters { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Error> Errors { get; set; }
        public virtual DbSet<EventMaster> EventMasters { get; set; }
        public virtual DbSet<Flat> Flats { get; set; }
        public virtual DbSet<FlatCharge> FlatCharges { get; set; }
        public virtual DbSet<FlatInstallmentDetail> FlatInstallmentDetails { get; set; }
        public virtual DbSet<FlatOCharge> FlatOCharges { get; set; }
        public virtual DbSet<FlatPLC> FlatPLCs { get; set; }
        public virtual DbSet<FlatType> FlatTypes { get; set; }
        public virtual DbSet<FlatTypeSize> FlatTypeSizes { get; set; }
        public virtual DbSet<Floor> Floors { get; set; }
        public virtual DbSet<LatePayment> LatePayments { get; set; }
        public virtual DbSet<ModuleList> ModuleLists { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<PaymentCancel> PaymentCancels { get; set; }
        public virtual DbSet<PaymentOther> PaymentOthers { get; set; }
        public virtual DbSet<PaymentOtherCancel> PaymentOtherCancels { get; set; }
        public virtual DbSet<PaymentRecord> PaymentRecords { get; set; }
        public virtual DbSet<PaymentRefund> PaymentRefunds { get; set; }
        public virtual DbSet<PayServiceTax> PayServiceTaxes { get; set; }
        public virtual DbSet<Plan> Plans { get; set; }
        public virtual DbSet<PlanInstallment> PlanInstallments { get; set; }
        public virtual DbSet<PlanTypeMaster> PlanTypeMasters { get; set; }
        public virtual DbSet<PLC> PLCs { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<ProjectType> ProjectTypes { get; set; }
        public virtual DbSet<PropertyRemark> PropertyRemarks { get; set; }
        public virtual DbSet<PropertyTransfer> PropertyTransfers { get; set; }
        public virtual DbSet<RefundProperty> RefundProperties { get; set; }
        public virtual DbSet<ReminderLetter> ReminderLetters { get; set; }
        public virtual DbSet<RoleAccess> RoleAccesses { get; set; }
        public virtual DbSet<ServiceTax> ServiceTaxes { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TaxMaster> TaxMasters { get; set; }
        public virtual DbSet<Tower> Towers { get; set; }
        public virtual DbSet<UploadAgreement> UploadAgreements { get; set; }
        public virtual DbSet<UserAccess> UserAccesses { get; set; }
        public virtual DbSet<UserProperty> UserProperties { get; set; }
        public virtual DbSet<PayTransferFee> PayTransferFees { get; set; }
        public virtual DbSet<PaymentMaster> PaymentMasters { get; set; }
        public virtual DbSet<SaleFlat> SaleFlats { get; set; }
    
        public virtual int GenerateAssuredReturn_Installment(Nullable<int> saleID, Nullable<decimal> amount, Nullable<decimal> interest, Nullable<System.DateTime> startDate, Nullable<System.DateTime> pDate, string userName, Nullable<decimal> tDSLimit, Nullable<decimal> tDSPer)
        {
            var saleIDParameter = saleID.HasValue ?
                new ObjectParameter("SaleID", saleID) :
                new ObjectParameter("SaleID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var interestParameter = interest.HasValue ?
                new ObjectParameter("Interest", interest) :
                new ObjectParameter("Interest", typeof(decimal));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var pDateParameter = pDate.HasValue ?
                new ObjectParameter("PDate", pDate) :
                new ObjectParameter("PDate", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var tDSLimitParameter = tDSLimit.HasValue ?
                new ObjectParameter("TDSLimit", tDSLimit) :
                new ObjectParameter("TDSLimit", typeof(decimal));
    
            var tDSPerParameter = tDSPer.HasValue ?
                new ObjectParameter("TDSPer", tDSPer) :
                new ObjectParameter("TDSPer", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateAssuredReturn_Installment", saleIDParameter, amountParameter, interestParameter, startDateParameter, pDateParameter, userNameParameter, tDSLimitParameter, tDSPerParameter);
        }
    
        public virtual ObjectResult<Get_Payment_Result> Get_Payment(Nullable<int> transactionID)
        {
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Payment_Result>("Get_Payment", transactionIDParameter);
        }
    
        public virtual int Insert_Payment(string installmentNo, Nullable<int> saleID, Nullable<System.DateTime> paymentDate, Nullable<System.DateTime> dueDate, Nullable<decimal> dueAmount, Nullable<decimal> interestAmount, Nullable<decimal> totalAmount, Nullable<decimal> amount, string paymentMode, string chequeNo, Nullable<System.DateTime> chequeDate, string bankName, string paymentStatus, string customerName, string remarks, string bankBranch, string amtRcvdinwords, string paymentNo, Nullable<bool> isReceipt, Nullable<int> userID, string activity, string flatName, Nullable<int> transactionID, Nullable<int> customerID, Nullable<bool> interest, string createdBy)
        {
            var installmentNoParameter = installmentNo != null ?
                new ObjectParameter("InstallmentNo", installmentNo) :
                new ObjectParameter("InstallmentNo", typeof(string));
    
            var saleIDParameter = saleID.HasValue ?
                new ObjectParameter("SaleID", saleID) :
                new ObjectParameter("SaleID", typeof(int));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var dueAmountParameter = dueAmount.HasValue ?
                new ObjectParameter("DueAmount", dueAmount) :
                new ObjectParameter("DueAmount", typeof(decimal));
    
            var interestAmountParameter = interestAmount.HasValue ?
                new ObjectParameter("InterestAmount", interestAmount) :
                new ObjectParameter("InterestAmount", typeof(decimal));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var paymentModeParameter = paymentMode != null ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(string));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var paymentStatusParameter = paymentStatus != null ?
                new ObjectParameter("PaymentStatus", paymentStatus) :
                new ObjectParameter("PaymentStatus", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var bankBranchParameter = bankBranch != null ?
                new ObjectParameter("BankBranch", bankBranch) :
                new ObjectParameter("BankBranch", typeof(string));
    
            var amtRcvdinwordsParameter = amtRcvdinwords != null ?
                new ObjectParameter("AmtRcvdinwords", amtRcvdinwords) :
                new ObjectParameter("AmtRcvdinwords", typeof(string));
    
            var paymentNoParameter = paymentNo != null ?
                new ObjectParameter("PaymentNo", paymentNo) :
                new ObjectParameter("PaymentNo", typeof(string));
    
            var isReceiptParameter = isReceipt.HasValue ?
                new ObjectParameter("IsReceipt", isReceipt) :
                new ObjectParameter("IsReceipt", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var activityParameter = activity != null ?
                new ObjectParameter("Activity", activity) :
                new ObjectParameter("Activity", typeof(string));
    
            var flatNameParameter = flatName != null ?
                new ObjectParameter("FlatName", flatName) :
                new ObjectParameter("FlatName", typeof(string));
    
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var interestParameter = interest.HasValue ?
                new ObjectParameter("Interest", interest) :
                new ObjectParameter("Interest", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Payment", installmentNoParameter, saleIDParameter, paymentDateParameter, dueDateParameter, dueAmountParameter, interestAmountParameter, totalAmountParameter, amountParameter, paymentModeParameter, chequeNoParameter, chequeDateParameter, bankNameParameter, paymentStatusParameter, customerNameParameter, remarksParameter, bankBranchParameter, amtRcvdinwordsParameter, paymentNoParameter, isReceiptParameter, userIDParameter, activityParameter, flatNameParameter, transactionIDParameter, customerIDParameter, interestParameter, createdByParameter);
        }
    
        public virtual int Insert_PaymentAssuredReturn(Nullable<int> saleID, Nullable<System.DateTime> paymentDate, Nullable<decimal> amount, string paymentMode, string chequeNo, Nullable<System.DateTime> chequeDate, string bankName, string paymentStatus, string customerName, string remarks, string bankBranch, string amtRcvdinwords, string paymentNo, Nullable<bool> isReceipt, string flatName, Nullable<int> transactionID, Nullable<int> customerID, string createdBy, Nullable<int> assuredReturnID)
        {
            var saleIDParameter = saleID.HasValue ?
                new ObjectParameter("SaleID", saleID) :
                new ObjectParameter("SaleID", typeof(int));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var paymentModeParameter = paymentMode != null ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(string));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var paymentStatusParameter = paymentStatus != null ?
                new ObjectParameter("PaymentStatus", paymentStatus) :
                new ObjectParameter("PaymentStatus", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var bankBranchParameter = bankBranch != null ?
                new ObjectParameter("BankBranch", bankBranch) :
                new ObjectParameter("BankBranch", typeof(string));
    
            var amtRcvdinwordsParameter = amtRcvdinwords != null ?
                new ObjectParameter("AmtRcvdinwords", amtRcvdinwords) :
                new ObjectParameter("AmtRcvdinwords", typeof(string));
    
            var paymentNoParameter = paymentNo != null ?
                new ObjectParameter("PaymentNo", paymentNo) :
                new ObjectParameter("PaymentNo", typeof(string));
    
            var isReceiptParameter = isReceipt.HasValue ?
                new ObjectParameter("IsReceipt", isReceipt) :
                new ObjectParameter("IsReceipt", typeof(bool));
    
            var flatNameParameter = flatName != null ?
                new ObjectParameter("FlatName", flatName) :
                new ObjectParameter("FlatName", typeof(string));
    
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var assuredReturnIDParameter = assuredReturnID.HasValue ?
                new ObjectParameter("AssuredReturnID", assuredReturnID) :
                new ObjectParameter("AssuredReturnID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_PaymentAssuredReturn", saleIDParameter, paymentDateParameter, amountParameter, paymentModeParameter, chequeNoParameter, chequeDateParameter, bankNameParameter, paymentStatusParameter, customerNameParameter, remarksParameter, bankBranchParameter, amtRcvdinwordsParameter, paymentNoParameter, isReceiptParameter, flatNameParameter, transactionIDParameter, customerIDParameter, createdByParameter, assuredReturnIDParameter);
        }
    
        public virtual ObjectResult<Rem_GetFlatPlanCharge_Result> Rem_GetFlatPlanCharge(Nullable<int> flatId)
        {
            var flatIdParameter = flatId.HasValue ?
                new ObjectParameter("FlatId", flatId) :
                new ObjectParameter("FlatId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rem_GetFlatPlanCharge_Result>("Rem_GetFlatPlanCharge", flatIdParameter);
        }
    
        public virtual int sp_Customer(Nullable<int> customerID, string appTitle, string fName, string mName, string lName, string title, string pName, string address1, string address2, string city, string state, string country, string pAN, string mobileNo, Nullable<System.DateTime> dateOfBirth, string coAppTitle, string coFName, string coMName, string coLName, string coAddress1, string coAddress2, string coCity, string coState, string coCountry, string coPAN, string coMobileNo, string alternateMobile, string landLine, string emailID, string alternateEmail, Nullable<decimal> loanAmount, string lienField, Nullable<int> bankID, string bankBranch, string secCoAppTitle, string secCoFName, string secCoMName, string secCoLName, string secCoAddress1, string secCoAddress2, string secCoCity, string secCoState, string secCoCountry, string secCoMobileNo, string secCoPAN, string coTitle, string coPName, string secCoTitle, string secCoPName, string remarks, Nullable<System.DateTime> coDOB, Nullable<System.DateTime> secCoDOB, string pinCode, string executiveName, string coPinCode, string secCoPinCode)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var appTitleParameter = appTitle != null ?
                new ObjectParameter("AppTitle", appTitle) :
                new ObjectParameter("AppTitle", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var mNameParameter = mName != null ?
                new ObjectParameter("MName", mName) :
                new ObjectParameter("MName", typeof(string));
    
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var pNameParameter = pName != null ?
                new ObjectParameter("PName", pName) :
                new ObjectParameter("PName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var pANParameter = pAN != null ?
                new ObjectParameter("PAN", pAN) :
                new ObjectParameter("PAN", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var coAppTitleParameter = coAppTitle != null ?
                new ObjectParameter("CoAppTitle", coAppTitle) :
                new ObjectParameter("CoAppTitle", typeof(string));
    
            var coFNameParameter = coFName != null ?
                new ObjectParameter("CoFName", coFName) :
                new ObjectParameter("CoFName", typeof(string));
    
            var coMNameParameter = coMName != null ?
                new ObjectParameter("CoMName", coMName) :
                new ObjectParameter("CoMName", typeof(string));
    
            var coLNameParameter = coLName != null ?
                new ObjectParameter("CoLName", coLName) :
                new ObjectParameter("CoLName", typeof(string));
    
            var coAddress1Parameter = coAddress1 != null ?
                new ObjectParameter("CoAddress1", coAddress1) :
                new ObjectParameter("CoAddress1", typeof(string));
    
            var coAddress2Parameter = coAddress2 != null ?
                new ObjectParameter("CoAddress2", coAddress2) :
                new ObjectParameter("CoAddress2", typeof(string));
    
            var coCityParameter = coCity != null ?
                new ObjectParameter("CoCity", coCity) :
                new ObjectParameter("CoCity", typeof(string));
    
            var coStateParameter = coState != null ?
                new ObjectParameter("CoState", coState) :
                new ObjectParameter("CoState", typeof(string));
    
            var coCountryParameter = coCountry != null ?
                new ObjectParameter("CoCountry", coCountry) :
                new ObjectParameter("CoCountry", typeof(string));
    
            var coPANParameter = coPAN != null ?
                new ObjectParameter("CoPAN", coPAN) :
                new ObjectParameter("CoPAN", typeof(string));
    
            var coMobileNoParameter = coMobileNo != null ?
                new ObjectParameter("CoMobileNo", coMobileNo) :
                new ObjectParameter("CoMobileNo", typeof(string));
    
            var alternateMobileParameter = alternateMobile != null ?
                new ObjectParameter("AlternateMobile", alternateMobile) :
                new ObjectParameter("AlternateMobile", typeof(string));
    
            var landLineParameter = landLine != null ?
                new ObjectParameter("LandLine", landLine) :
                new ObjectParameter("LandLine", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var alternateEmailParameter = alternateEmail != null ?
                new ObjectParameter("AlternateEmail", alternateEmail) :
                new ObjectParameter("AlternateEmail", typeof(string));
    
            var loanAmountParameter = loanAmount.HasValue ?
                new ObjectParameter("LoanAmount", loanAmount) :
                new ObjectParameter("LoanAmount", typeof(decimal));
    
            var lienFieldParameter = lienField != null ?
                new ObjectParameter("LienField", lienField) :
                new ObjectParameter("LienField", typeof(string));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var bankBranchParameter = bankBranch != null ?
                new ObjectParameter("BankBranch", bankBranch) :
                new ObjectParameter("BankBranch", typeof(string));
    
            var secCoAppTitleParameter = secCoAppTitle != null ?
                new ObjectParameter("SecCoAppTitle", secCoAppTitle) :
                new ObjectParameter("SecCoAppTitle", typeof(string));
    
            var secCoFNameParameter = secCoFName != null ?
                new ObjectParameter("SecCoFName", secCoFName) :
                new ObjectParameter("SecCoFName", typeof(string));
    
            var secCoMNameParameter = secCoMName != null ?
                new ObjectParameter("SecCoMName", secCoMName) :
                new ObjectParameter("SecCoMName", typeof(string));
    
            var secCoLNameParameter = secCoLName != null ?
                new ObjectParameter("SecCoLName", secCoLName) :
                new ObjectParameter("SecCoLName", typeof(string));
    
            var secCoAddress1Parameter = secCoAddress1 != null ?
                new ObjectParameter("SecCoAddress1", secCoAddress1) :
                new ObjectParameter("SecCoAddress1", typeof(string));
    
            var secCoAddress2Parameter = secCoAddress2 != null ?
                new ObjectParameter("SecCoAddress2", secCoAddress2) :
                new ObjectParameter("SecCoAddress2", typeof(string));
    
            var secCoCityParameter = secCoCity != null ?
                new ObjectParameter("SecCoCity", secCoCity) :
                new ObjectParameter("SecCoCity", typeof(string));
    
            var secCoStateParameter = secCoState != null ?
                new ObjectParameter("SecCoState", secCoState) :
                new ObjectParameter("SecCoState", typeof(string));
    
            var secCoCountryParameter = secCoCountry != null ?
                new ObjectParameter("SecCoCountry", secCoCountry) :
                new ObjectParameter("SecCoCountry", typeof(string));
    
            var secCoMobileNoParameter = secCoMobileNo != null ?
                new ObjectParameter("SecCoMobileNo", secCoMobileNo) :
                new ObjectParameter("SecCoMobileNo", typeof(string));
    
            var secCoPANParameter = secCoPAN != null ?
                new ObjectParameter("SecCoPAN", secCoPAN) :
                new ObjectParameter("SecCoPAN", typeof(string));
    
            var coTitleParameter = coTitle != null ?
                new ObjectParameter("CoTitle", coTitle) :
                new ObjectParameter("CoTitle", typeof(string));
    
            var coPNameParameter = coPName != null ?
                new ObjectParameter("CoPName", coPName) :
                new ObjectParameter("CoPName", typeof(string));
    
            var secCoTitleParameter = secCoTitle != null ?
                new ObjectParameter("SecCoTitle", secCoTitle) :
                new ObjectParameter("SecCoTitle", typeof(string));
    
            var secCoPNameParameter = secCoPName != null ?
                new ObjectParameter("SecCoPName", secCoPName) :
                new ObjectParameter("SecCoPName", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var coDOBParameter = coDOB.HasValue ?
                new ObjectParameter("CoDOB", coDOB) :
                new ObjectParameter("CoDOB", typeof(System.DateTime));
    
            var secCoDOBParameter = secCoDOB.HasValue ?
                new ObjectParameter("SecCoDOB", secCoDOB) :
                new ObjectParameter("SecCoDOB", typeof(System.DateTime));
    
            var pinCodeParameter = pinCode != null ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(string));
    
            var executiveNameParameter = executiveName != null ?
                new ObjectParameter("ExecutiveName", executiveName) :
                new ObjectParameter("ExecutiveName", typeof(string));
    
            var coPinCodeParameter = coPinCode != null ?
                new ObjectParameter("CoPinCode", coPinCode) :
                new ObjectParameter("CoPinCode", typeof(string));
    
            var secCoPinCodeParameter = secCoPinCode != null ?
                new ObjectParameter("SecCoPinCode", secCoPinCode) :
                new ObjectParameter("SecCoPinCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Customer", customerIDParameter, appTitleParameter, fNameParameter, mNameParameter, lNameParameter, titleParameter, pNameParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, countryParameter, pANParameter, mobileNoParameter, dateOfBirthParameter, coAppTitleParameter, coFNameParameter, coMNameParameter, coLNameParameter, coAddress1Parameter, coAddress2Parameter, coCityParameter, coStateParameter, coCountryParameter, coPANParameter, coMobileNoParameter, alternateMobileParameter, landLineParameter, emailIDParameter, alternateEmailParameter, loanAmountParameter, lienFieldParameter, bankIDParameter, bankBranchParameter, secCoAppTitleParameter, secCoFNameParameter, secCoMNameParameter, secCoLNameParameter, secCoAddress1Parameter, secCoAddress2Parameter, secCoCityParameter, secCoStateParameter, secCoCountryParameter, secCoMobileNoParameter, secCoPANParameter, coTitleParameter, coPNameParameter, secCoTitleParameter, secCoPNameParameter, remarksParameter, coDOBParameter, secCoDOBParameter, pinCodeParameter, executiveNameParameter, coPinCodeParameter, secCoPinCodeParameter);
        }
    
        public virtual ObjectResult<spGetProjectByFlatid_Result> spGetProjectByFlatid(Nullable<int> flatid)
        {
            var flatidParameter = flatid.HasValue ?
                new ObjectParameter("flatid", flatid) :
                new ObjectParameter("flatid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjectByFlatid_Result>("spGetProjectByFlatid", flatidParameter);
        }
    
        public virtual ObjectResult<Project> spGetProjectByFlatid1(Nullable<int> flatid)
        {
            var flatidParameter = flatid.HasValue ?
                new ObjectParameter("flatid", flatid) :
                new ObjectParameter("flatid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Project>("spGetProjectByFlatid1", flatidParameter);
        }
    
        public virtual ObjectResult<Project> spGetProjectByFlatid1(Nullable<int> flatid, MergeOption mergeOption)
        {
            var flatidParameter = flatid.HasValue ?
                new ObjectParameter("flatid", flatid) :
                new ObjectParameter("flatid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Project>("spGetProjectByFlatid1", mergeOption, flatidParameter);
        }
    
        public virtual int Insert_PaymentOther(Nullable<int> saleID, string installmentNo, Nullable<System.DateTime> paymentDate, Nullable<decimal> amount, string paymentMode, string chequeNo, Nullable<System.DateTime> chequeDate, string bankName, string paymentStatus, string customerName, string remarks, string bankBranch, string amtRcvdinwords, string paymentNo, Nullable<bool> isReceipt, string activity, string flatName, Nullable<int> transactionID, Nullable<int> customerID, string createdBy)
        {
            var saleIDParameter = saleID.HasValue ?
                new ObjectParameter("SaleID", saleID) :
                new ObjectParameter("SaleID", typeof(int));
    
            var installmentNoParameter = installmentNo != null ?
                new ObjectParameter("InstallmentNo", installmentNo) :
                new ObjectParameter("InstallmentNo", typeof(string));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var paymentModeParameter = paymentMode != null ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(string));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var paymentStatusParameter = paymentStatus != null ?
                new ObjectParameter("PaymentStatus", paymentStatus) :
                new ObjectParameter("PaymentStatus", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var bankBranchParameter = bankBranch != null ?
                new ObjectParameter("BankBranch", bankBranch) :
                new ObjectParameter("BankBranch", typeof(string));
    
            var amtRcvdinwordsParameter = amtRcvdinwords != null ?
                new ObjectParameter("AmtRcvdinwords", amtRcvdinwords) :
                new ObjectParameter("AmtRcvdinwords", typeof(string));
    
            var paymentNoParameter = paymentNo != null ?
                new ObjectParameter("PaymentNo", paymentNo) :
                new ObjectParameter("PaymentNo", typeof(string));
    
            var isReceiptParameter = isReceipt.HasValue ?
                new ObjectParameter("IsReceipt", isReceipt) :
                new ObjectParameter("IsReceipt", typeof(bool));
    
            var activityParameter = activity != null ?
                new ObjectParameter("Activity", activity) :
                new ObjectParameter("Activity", typeof(string));
    
            var flatNameParameter = flatName != null ?
                new ObjectParameter("FlatName", flatName) :
                new ObjectParameter("FlatName", typeof(string));
    
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_PaymentOther", saleIDParameter, installmentNoParameter, paymentDateParameter, amountParameter, paymentModeParameter, chequeNoParameter, chequeDateParameter, bankNameParameter, paymentStatusParameter, customerNameParameter, remarksParameter, bankBranchParameter, amtRcvdinwordsParameter, paymentNoParameter, isReceiptParameter, activityParameter, flatNameParameter, transactionIDParameter, customerIDParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Get_PaymentOther_Result> Get_PaymentOther(Nullable<int> transactionID)
        {
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_PaymentOther_Result>("Get_PaymentOther", transactionIDParameter);
        }
    
        public virtual ObjectResult<spPlanSummary_Result> spPlanSummary(Nullable<decimal> flatSize)
        {
            var flatSizeParameter = flatSize.HasValue ?
                new ObjectParameter("FlatSize", flatSize) :
                new ObjectParameter("FlatSize", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPlanSummary_Result>("spPlanSummary", flatSizeParameter);
        }
    
        public virtual int Update_Clearance(string transactionID, string chargeAmount, string remarks, string modifyBy, string isBounce, Nullable<System.DateTime> clearanceDate)
        {
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            var chargeAmountParameter = chargeAmount != null ?
                new ObjectParameter("ChargeAmount", chargeAmount) :
                new ObjectParameter("ChargeAmount", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var modifyByParameter = modifyBy != null ?
                new ObjectParameter("ModifyBy", modifyBy) :
                new ObjectParameter("ModifyBy", typeof(string));
    
            var isBounceParameter = isBounce != null ?
                new ObjectParameter("IsBounce", isBounce) :
                new ObjectParameter("IsBounce", typeof(string));
    
            var clearanceDateParameter = clearanceDate.HasValue ?
                new ObjectParameter("ClearanceDate", clearanceDate) :
                new ObjectParameter("ClearanceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Clearance", transactionIDParameter, chargeAmountParameter, remarksParameter, modifyByParameter, isBounceParameter, clearanceDateParameter);
        }
    
        public virtual int Update_Payment(Nullable<int> saleID, Nullable<int> transactionID, Nullable<System.DateTime> paymentDate, Nullable<decimal> amount, string paymentMode, string chequeNo, Nullable<System.DateTime> chequeDate, string bankName, string paymentStatus, string remarks, string bankBranch, string amtRcvdinwords, string userName, string activity)
        {
            var saleIDParameter = saleID.HasValue ?
                new ObjectParameter("SaleID", saleID) :
                new ObjectParameter("SaleID", typeof(int));
    
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(int));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var paymentModeParameter = paymentMode != null ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(string));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var paymentStatusParameter = paymentStatus != null ?
                new ObjectParameter("PaymentStatus", paymentStatus) :
                new ObjectParameter("PaymentStatus", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var bankBranchParameter = bankBranch != null ?
                new ObjectParameter("BankBranch", bankBranch) :
                new ObjectParameter("BankBranch", typeof(string));
    
            var amtRcvdinwordsParameter = amtRcvdinwords != null ?
                new ObjectParameter("AmtRcvdinwords", amtRcvdinwords) :
                new ObjectParameter("AmtRcvdinwords", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var activityParameter = activity != null ?
                new ObjectParameter("Activity", activity) :
                new ObjectParameter("Activity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Payment", saleIDParameter, transactionIDParameter, paymentDateParameter, amountParameter, paymentModeParameter, chequeNoParameter, chequeDateParameter, bankNameParameter, paymentStatusParameter, remarksParameter, bankBranchParameter, amtRcvdinwordsParameter, userNameParameter, activityParameter);
        }
    
        public virtual int Update_TransferProperty(Nullable<int> customerID, string fName, string mName, string lName, Nullable<int> saleID, string transferAmount, string userName, Nullable<System.DateTime> transferDate)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var mNameParameter = mName != null ?
                new ObjectParameter("MName", mName) :
                new ObjectParameter("MName", typeof(string));
    
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var saleIDParameter = saleID.HasValue ?
                new ObjectParameter("SaleID", saleID) :
                new ObjectParameter("SaleID", typeof(int));
    
            var transferAmountParameter = transferAmount != null ?
                new ObjectParameter("TransferAmount", transferAmount) :
                new ObjectParameter("TransferAmount", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var transferDateParameter = transferDate.HasValue ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_TransferProperty", customerIDParameter, fNameParameter, mNameParameter, lNameParameter, saleIDParameter, transferAmountParameter, userNameParameter, transferDateParameter);
        }
    
        public virtual int Insert_PaymentOther1(Nullable<int> saleID, string installmentNo, Nullable<System.DateTime> paymentDate, Nullable<decimal> amount, string paymentMode, string chequeNo, Nullable<System.DateTime> chequeDate, string bankName, string paymentStatus, string customerName, string remarks, string bankBranch, string amtRcvdinwords, string paymentNo, Nullable<bool> isReceipt, string activity, string flatName, Nullable<int> transactionID, Nullable<int> customerID, string createdBy)
        {
            var saleIDParameter = saleID.HasValue ?
                new ObjectParameter("SaleID", saleID) :
                new ObjectParameter("SaleID", typeof(int));
    
            var installmentNoParameter = installmentNo != null ?
                new ObjectParameter("InstallmentNo", installmentNo) :
                new ObjectParameter("InstallmentNo", typeof(string));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var paymentModeParameter = paymentMode != null ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(string));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var paymentStatusParameter = paymentStatus != null ?
                new ObjectParameter("PaymentStatus", paymentStatus) :
                new ObjectParameter("PaymentStatus", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var bankBranchParameter = bankBranch != null ?
                new ObjectParameter("BankBranch", bankBranch) :
                new ObjectParameter("BankBranch", typeof(string));
    
            var amtRcvdinwordsParameter = amtRcvdinwords != null ?
                new ObjectParameter("AmtRcvdinwords", amtRcvdinwords) :
                new ObjectParameter("AmtRcvdinwords", typeof(string));
    
            var paymentNoParameter = paymentNo != null ?
                new ObjectParameter("PaymentNo", paymentNo) :
                new ObjectParameter("PaymentNo", typeof(string));
    
            var isReceiptParameter = isReceipt.HasValue ?
                new ObjectParameter("IsReceipt", isReceipt) :
                new ObjectParameter("IsReceipt", typeof(bool));
    
            var activityParameter = activity != null ?
                new ObjectParameter("Activity", activity) :
                new ObjectParameter("Activity", typeof(string));
    
            var flatNameParameter = flatName != null ?
                new ObjectParameter("FlatName", flatName) :
                new ObjectParameter("FlatName", typeof(string));
    
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_PaymentOther1", saleIDParameter, installmentNoParameter, paymentDateParameter, amountParameter, paymentModeParameter, chequeNoParameter, chequeDateParameter, bankNameParameter, paymentStatusParameter, customerNameParameter, remarksParameter, bankBranchParameter, amtRcvdinwordsParameter, paymentNoParameter, isReceiptParameter, activityParameter, flatNameParameter, transactionIDParameter, customerIDParameter, createdByParameter);
        }
    }
}
